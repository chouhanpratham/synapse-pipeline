{
	"name": "DataflowUserResult",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTables",
						"type": "DatasetReference"
					},
					"name": "sourceSQLDatabase"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlUsers",
						"type": "DatasetReference"
					},
					"name": "sourceUsers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CSVUserResult",
						"type": "DatasetReference"
					},
					"name": "sinkOutput"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResultId as string,",
				"          AssessmentId as string,",
				"          UserId as string,",
				"          Score as integer,",
				"          AttemptDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceSQLDatabase",
				"source(output(",
				"          UserId as string,",
				"          Name as string,",
				"          Email as string,",
				"          Role as string,",
				"          PasswordHash as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceUsers",
				"sourceSQLDatabase, sourceUsers lookup(sourceSQLDatabase@UserId == sourceUsers@UserId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          Name,",
				"          Email,",
				"          Score,",
				"          AttemptDate,",
				"          AssessmentId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkOutput"
			]
		}
	}
}